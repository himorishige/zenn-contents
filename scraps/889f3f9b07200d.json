{
  "title": "aws cdk v2に入門してみる",
  "closed": true,
  "archived": false,
  "created_at": "2021-08-14",
  "comments": [
    {
      "author": "himorishige",
      "created_at": "2021-08-14",
      "body_markdown": "cdk v2がRC17まで来ているので移行を踏まえいろいろと試してみる。\nv2からは都度サービスごとのパッケージをインストールする必要がないところが一番のメリットだと思う。（v1だと各パッケージのバージョン違いで謎のエラーが出るので）\n\nhttps://github.com/aws/aws-cdk\n\nhttps://docs.aws.amazon.com/cdk/latest/guide/work-with-cdk-v2.html\n\nhttps://aws.amazon.com/jp/blogs/news/announcing-aws-cloud-development-kit-v2-developer-preview/",
      "body_updated_at": "2021-08-16",
      "children": [
        {
          "author": "himorishige",
          "created_at": "2021-08-14",
          "body_markdown": "セットアップスクリプトはまだないので、スクラッチでの環境構築。\n\n```diff bash\n$ mkdir aws-cdk-v2-sample && cd aws-cdk-v2-sample\n$ npm init -y\n- $ npm i -D aws-cdk aws-cdk-lib constructs ts-node typescript\n+ $ npm i -D aws-cdk@2.0.0-rc.17 aws-cdk-lib constructs ts-node typescript\n```\n\n```json:/cdk.json\n{\n  \"app\": \"npx ts-node infrastructure/bootstrap.ts\",\n}\n```\n\n```typescript:/infrastructure/bootstrap.ts\nimport { SampleStack } from './sampleStack'\nimport { App } from 'aws-cdk-lib'\n\nconst app = new App()\nnew SampleStack(app, 'Sample-app', {\n  stackName: 'SampleApp'\n})\n```\n\n```typescript:/infrastructure/sampleStack.ts\nimport { Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\n\nexport class SampleStack extends Stack {\n    constructor(scope: Construct, id: string, props: StackProps) {\n        super(scope, id, props)\n    }\n} \n```\n\n```json:/tsconfig.json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2018\",\n    \"module\": \"commonjs\",\n    \"lib\": [\n      \"es2018\"\n    ],\n    \"declaration\": true,\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"strictNullChecks\": true,\n    \"noImplicitThis\": true,\n    \"alwaysStrict\": true,\n    \"noUnusedLocals\": false,\n    \"noUnusedParameters\": false,\n    \"noImplicitReturns\": true,\n    \"noFallthroughCasesInSwitch\": false,\n    \"inlineSourceMap\": true,\n    \"inlineSources\": true,\n    \"experimentalDecorators\": true,\n    \"strictPropertyInitialization\": false,\n    \"typeRoots\": [\n      \"./node_modules/@types\"\n    ]\n  },\n  \"exclude\": [\n    \"node_modules\",\n    \"cdk.out\"\n  ]\n}\n```\n\n:::details .gitignore\n```bash:.gitignore\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\nlerna-debug.log*\n\n# Diagnostic reports (https://nodejs.org/api/report.html)\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\n\n# Runtime data\npids\n*.pid\n*.seed\n*.pid.lock\n\n# Directory for instrumented libs generated by jscoverage/JSCover\nlib-cov\n\n# Coverage directory used by tools like istanbul\ncoverage\n*.lcov\n\n# nyc test coverage\n.nyc_output\n\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\n.grunt\n\n# Bower dependency directory (https://bower.io/)\nbower_components\n\n# node-waf configuration\n.lock-wscript\n\n# Compiled binary addons (https://nodejs.org/api/addons.html)\nbuild/Release\n\n# Dependency directories\nnode_modules/\njspm_packages/\n\n# TypeScript v1 declaration files\ntypings/\n\n# TypeScript cache\n*.tsbuildinfo\n\n# Optional npm cache directory\n.npm\n\n# Optional eslint cache\n.eslintcache\n\n# Microbundle cache\n.rpt2_cache/\n.rts2_cache_cjs/\n.rts2_cache_es/\n.rts2_cache_umd/\n\n# Optional REPL history\n.node_repl_history\n\n# Output of 'npm pack'\n*.tgz\n\n# Yarn Integrity file\n.yarn-integrity\n\n# dotenv environment variables file\n.env\n.env.test\n\n# parcel-bundler cache (https://parceljs.org/)\n.cache\n\n# Next.js build output\n.next\n\n# Nuxt.js build / generate output\n.nuxt\ndist\n\n# Gatsby files\n.cache/\n# Comment in the public line in if your project uses Gatsby and *not* Next.js\n# https://nextjs.org/blog/next-9-1#public-directory-support\n# public\n\n# vuepress build output\n.vuepress/dist\n\n# Serverless directories\n.serverless/\n\n# FuseBox cache\n.fusebox/\n\n# DynamoDB Local files\n.dynamodb/\n\n# TernJS port file\n.tern-port\n\n# aws cdk\nnode_modules\n\n# CDK asset staging directory\n.cdk.staging\ncdk.out\n```\n:::\n\n最低限のファイルを設置したのち、`$ cdk stynth`でエラーが出ないか確認。\n\n```bash\n$ cdk synth\n```",
          "body_updated_at": "2021-08-16"
        },
        {
          "author": "himorishige",
          "created_at": "2021-08-14",
          "body_markdown": "deployするときにエラー。\ncdk cliもバージョンアップの必要あり。\n現時点での最新版rc.17にアップデートする。\n\n```bash\n$ npm i -g aws-cdk@2.0.0-rc.17\n```\n\n```json:package.json\n  \"devDependencies\": {\n    \"@types/aws-lambda\": \"^8.10.82\",\n    \"@types/node\": \"^16.6.0\",\n    \"aws-cdk\": \"^2.0.0-rc.17\",\n    \"aws-cdk-lib\": \"^2.0.0-rc.17\",\n    \"constructs\": \"^10.0.5\",\n    \"esbuild\": \"^0.12.19\",\n    \"ts-node\": \"^10.2.0\",\n    \"typescript\": \"^4.3.5\"\n  }\n```\n\nbootstrapもv1とは異なるため再度作り直す必要あり。\n\n```bash\n$ cdk bootstrap\n$ cdk deploy\n```",
          "body_updated_at": "2021-08-14"
        }
      ]
    },
    {
      "author": "himorishige",
      "created_at": "2021-08-14",
      "body_markdown": "Fargateの環境をつくる",
      "children": [
        {
          "author": "himorishige",
          "created_at": "2021-08-14",
          "body_markdown": "v1と一部メソッド名は違うものの補完を使えばほぼそのまま。\nコンテナイメージはawsのサンプルを一旦利用してみる。\n\n```typescript:/infrastructure/bootstrap.ts\nimport { FargateStack } from './fargateStack';\nimport { App } from 'aws-cdk-lib';\n\nconst app = new App();\nnew FargateStack(app, 'fargateApp', {\n  stackName: 'FargateApp',\n});\n```\n\n```typescript:/infrastructure/fargateStack.ts\nimport { aws_ec2, aws_ecs, aws_ecs_patterns, Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\n\nexport class FargateStack extends Stack {\n  constructor(scope: Construct, id: string, props: StackProps) {\n    super(scope, id, props);\n\n    const vpc = new aws_ec2.Vpc(this, 'FargateVpc');\n\n    const cluster = new aws_ecs.Cluster(this, 'FargateCluster', {\n      vpc,\n    });\n\n    const loadBalancedFargateService = new aws_ecs_patterns.ApplicationLoadBalancedFargateService(\n      this,\n      'FargateService',\n      {\n        cluster,\n        memoryLimitMiB: 1024,\n        cpu: 512,\n        taskImageOptions: {\n          image: aws_ecs.ContainerImage.fromRegistry('amazon/amazon-ecs-sample'),\n        },\n      },\n    );\n\n    loadBalancedFargateService.targetGroup.configureHealthCheck({\n      path: '/custom-health-path',\n    });\n  }\n}\n```\n\n```bash\n$ cdk synth\n```\nでエラーが出ないことを確認して、\n```bash\n$ cdk deploy\n```\n\n![](https://storage.googleapis.com/zenn-user-upload/66ca2ab991e9ffcaa7c99610.png)\n"
        }
      ]
    }
  ]
}